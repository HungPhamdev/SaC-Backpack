USE SacDatabase
-- Top 5 Product best sale in a last month 
CREATE PROCEDURE FiveBestSellingProducts
AS
SELECT TOP(4) PRODUCTS.PRODUCTID, PRODUCTNAME, PRICE, CATEGORY, IMAGE, DESCRIPTION, STATUS FROM PRODUCTS 
INNER JOIN ORDERDETAILS ON PRODUCTS.PRODUCTID = ORDERDETAILS.PRODUCTID
INNER JOIN ORDERS ON ORDERDETAILS.ORDERID = ORDERS.ORDERID
WHERE ORDERS.ORDERSTATUS = 3 AND (ORDERS.ORDERDATE > GETDATE() - 30)
GROUP BY PRODUCTS.PRODUCTID, PRODUCTNAME, PRICE, CATEGORY, IMAGE, DESCRIPTION, STATUS
ORDER BY SUM(ORDERDETAILS.QUANTITY) DESC
GO
EXEC FiveBestSellingProducts
-- Lấy ra trong tháng hiện tại
-- 1 bảng report: 5 sản phẩm bán chạy trong tháng, tổng doanh thu trong tháng, tổng doanh thu trong năm, số lượng khách hàng đăng ký, 
-- Quantity Customer Register in Website in a last month
CREATE PROCEDURE QuantityCustomerRegister
AS
SELECT COUNT(CREATEDDATE) AS N'Tổng số lượng đăng ký' FROM CUSTOMERS 
WHERE MONTH(CREATEDDATE) = MONTH(GETDATE())
GO
EXEC QuantityCustomerRegister

-- Total Product quantity in Order Detail
SELECT PRODUCTS.PRODUCTID, PRODUCTNAME, SUM(QUANTITY) AS N'Tổng số lượng'
FROM ORDERDETAILS INNER JOIN PRODUCTS ON PRODUCTS.PRODUCTID = ORDERDETAILS.PRODUCTID
GROUP BY PRODUCTNAME, PRODUCTS.PRODUCTID
ORDER BY SUM(QUANTITY) DESC
GO

-- Total Product quantity in Order Detail has order status is delivered
SELECT PRODUCTS.PRODUCTID, PRODUCTNAME, SUM(QUANTITY) AS N'Tổng số lượng'
FROM ORDERDETAILS INNER JOIN PRODUCTS ON PRODUCTS.PRODUCTID = ORDERDETAILS.PRODUCTID
INNER JOIN ORDERS ON ORDERDETAILS.ORDERID = ORDERS.ORDERID 
WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(Orders.OrderDate) = MONTH(GETDATE())
GROUP BY PRODUCTNAME, PRODUCTS.PRODUCTID
ORDER BY SUM(QUANTITY) DESC
GO
EXEC FiveBestSellingProducts

-- Total Quantity Order was payment in current month
SELECT SUM(ORDERID) AS N'Tổng số lượng đơn hàng tháng này' FROM ORDERS 
WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(Orders.OrderDate) = MONTH(GETDATE())
GO

-- Total Money from sell Product in current month
SELECT SUM(TOTAL) AS N'Tổng doanh thu tháng này' FROM ORDERS 
WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(Orders.OrderDate) = MONTH(GETDATE())
GO

-- Total Money of each Product current month
SELECT PRODUCTNAME, SUM(QUANTITY) AS N'Tổng số lượng', (SUM(QUANTITY)*PRODUCTS.PRICE) AS N'Tổng tiền' 
FROM ORDERDETAILS INNER JOIN PRODUCTS ON PRODUCTS.PRODUCTID = ORDERDETAILS.PRODUCTID
INNER JOIN ORDERS ON ORDERDETAILS.ORDERID = ORDERS.ORDERID 
WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(Orders.OrderDate) = MONTH(GETDATE())
GROUP BY PRODUCTNAME, PRODUCTS.PRICE
GO

-- Total ShipInfo in current month
SELECT SUM(PRICE) AS N'Vận chuyển'
FROM SHIPINFOS INNER JOIN ORDERS ON SHIPINFOS.ORDERID = ORDERS.ORDERID
WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(Orders.OrderDate) = MONTH(GETDATE())
GO

-- Total Money from sell Product and Ship in current month
SELECT SUM(TOTAL) + SUM(PRICE) AS N'Tổng doanh thu' 
FROM ORDERS INNER JOIN SHIPINFOS ON SHIPINFOS.ORDERID = ORDERS.ORDERID
WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(Orders.OrderDate) = MONTH(GETDATE())
GO

-- Làm thế nào để biết số lần Voucher được sử dụng

-- Statistical when update Orders
CREATE TRIGGER trig_StatisticalByOrder
ON ORDERS
AFTER UPDATE
AS	
BEGIN
	DECLARE @AFORDERDATE INT;
	SET @AFORDERDATE = (SELECT MONTH(O.ORDERDATE) FROM INSERTED O 
						INNER JOIN ORDERS ON O.ORDERID = ORDERS.ORDERID 
						WHERE O.ORDERSTATUS = 3 AND O.ORDERID = ORDERS.ORDERID)	
	IF EXISTS(SELECT STATISTICALMONTH FROM STATISTICALS WHERE STATISTICALMONTH = @AFORDERDATE)
		BEGIN
			UPDATE STATISTICALS
			SET QUANTITYORDER = (SELECT SUM(ORDERID) AS N'Tổng số lượng đơn hàng tháng này' FROM ORDERS
								 WHERE ORDERSTATUS = 3 AND MONTH(ORDERDATE) = @AFORDERDATE), 
			REVENUE = (SELECT SUM(TOTAL) AS N'Tổng doanh thu tháng này' FROM ORDERS 
					   WHERE ORDERSTATUS = 3 AND MONTH(ORDERDATE) = @AFORDERDATE), 
			TRANSPORT = (SELECT SUM(PRICE) AS N'Vận chuyển' FROM SHIPINFOS 
						 INNER JOIN ORDERS ON SHIPINFOS.ORDERID = ORDERS.ORDERID
						 WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(ORDERS.ORDERDATE) = @AFORDERDATE),
			TOTALREVENUE = (SELECT SUM(TOTAL) + SUM(PRICE) AS N'Tổng doanh thu' FROM ORDERS 
							INNER JOIN SHIPINFOS ON SHIPINFOS.ORDERID = ORDERS.ORDERID
							WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(ORDERS.ORDERDATE) = @AFORDERDATE)
			WHERE STATISTICALMONTH = @AFORDERDATE
		END
	ELSE
		BEGIN
			IF(@AFORDERDATE != 0)
			BEGIN
				INSERT INTO STATISTICALS(STATISTICALMONTH, QUANTITYREGISTER, QUANTITYORDER, REVENUE, TRANSPORT, TOTALREVENUE) VALUES (
				@AFORDERDATE, 
				(SELECT COUNT(CREATEDDATE) AS N'Tổng số lượng đăng ký' FROM CUSTOMERS 
				WHERE MONTH(CREATEDDATE) = @AFORDERDATE),
				(SELECT SUM(ORDERID) AS N'Tổng số lượng đơn hàng tháng này' FROM ORDERS 
				WHERE ORDERSTATUS = 3 AND MONTH(ORDERDATE) = @AFORDERDATE),
				(SELECT SUM(TOTAL) AS N'Tổng doanh thu tháng này' FROM ORDERS 
				WHERE ORDERSTATUS = 3 AND MONTH(ORDERDATE) = @AFORDERDATE),
				(SELECT SUM(PRICE) AS N'Vận chuyển' FROM SHIPINFOS INNER JOIN ORDERS ON SHIPINFOS.ORDERID = ORDERS.ORDERID
				WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(ORDERS.ORDERDATE) = @AFORDERDATE),
				(SELECT SUM(TOTAL) + SUM(PRICE) AS N'Tổng doanh thu' 
				FROM ORDERS INNER JOIN SHIPINFOS ON SHIPINFOS.ORDERID = ORDERS.ORDERID
				WHERE ORDERS.ORDERSTATUS = 3 AND MONTH(ORDERS.ORDERDATE) = @AFORDERDATE));	
			END			
		END
END
GO

-- Statistical when update Customer
CREATE TRIGGER trig_StatisticalByCustomer
ON CUSTOMERS
AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @AFCREATEDATE INT;
	SET @AFCREATEDATE = (SELECT MONTH(C.CREATEDDATE) FROM INSERTED C 
						INNER JOIN CUSTOMERS ON C.CUSTOMERID = CUSTOMERS.CUSTOMERID 
						WHERE C.CUSTOMERID = CUSTOMERS.CUSTOMERID AND C.STATUS = 1)	
	IF EXISTS(SELECT STATISTICALMONTH FROM STATISTICALS WHERE STATISTICALMONTH = @AFCREATEDATE)
		BEGIN
			UPDATE STATISTICALS
			SET QUANTITYREGISTER = (SELECT COUNT(CREATEDDATE) AS N'Tổng số lượng đăng ký' FROM CUSTOMERS 
									WHERE MONTH(CREATEDDATE) = @AFCREATEDATE)
			WHERE STATISTICALMONTH = @AFCREATEDATE
		END
	ELSE
		BEGIN
			IF(@AFCREATEDATE != 0)
				BEGIN
					INSERT INTO STATISTICALS(STATISTICALMONTH, QUANTITYREGISTER) VALUES (
					 @AFCREATEDATE,
					(SELECT COUNT(CREATEDDATE) AS N'Tổng số lượng đăng ký' FROM CUSTOMERS 
					 WHERE MONTH(CREATEDDATE) = @AFCREATEDATE))
				END					
		END
END
GO
SELECT * FROM STATISTICALS
GO

-- Statistical when update TOTALALLSTATISTICAL
CREATE TRIGGER trig_TOTALALLSTATISTICAL
ON STATISTICALS
AFTER INSERT, UPDATE 
AS
BEGIN
	SET NOCOUNT ON;	
	DECLARE @ID INT;
	SET @ID = (SELECT TOTALSTATISTICALLID FROM TOTALALLSTATISTICAL)	
	IF(@ID!=0)
		BEGIN
			UPDATE TOTALALLSTATISTICAL
			SET TOTALQUANTITYREGISTER = (SELECT SUM(QUANTITYREGISTER) AS N'Tổng số lượng đăng ký' FROM STATISTICALS),
			TOTALQUANTITYORDER = (SELECT SUM(QUANTITYORDER) AS N'Tổng số lượng đơn hàng' FROM STATISTICALS), 
			TOTALREVENUE = (SELECT SUM(REVENUE) AS N'Tổng doanh thu' FROM STATISTICALS), 
			TOTALTRANSPORT = (SELECT SUM(TRANSPORT) AS N'Tổng tiền vận chuyển' FROM STATISTICALS),
			TOTALALLREVENUE = (SELECT SUM(TOTALREVENUE) AS N'Tổng tất cả doanh thu' FROM STATISTICALS)
		END
	ELSE
		BEGIN
			INSERT INTO TOTALALLSTATISTICAL(TOTALQUANTITYREGISTER, TOTALQUANTITYORDER, TOTALREVENUE, TOTALTRANSPORT, TOTALALLREVENUE) VALUES (0, 0, 0, 0, 0)
		END
END
GO

-- Search Statistical by StartDate and EndDate
CREATE PROCEDURE SearchStatistical(@STARTDATE DATE, @ENDDATE DATE)
AS
SELECT * FROM STATISTICALS 
WHERE STATISTICALMONTH BETWEEN MONTH(@STARTDATE) AND MONTH(@ENDDATE)
GO
EXEC SearchStatistical '2021-10-01', '2021-12-06'

--CREATE PROCEDURE SearchOrder(@DATE DATE)
--AS
SELECT * FROM ORDERS 
WHERE OrderDate between (MONTH('2021-12-15') - 30) and MONTH('2021-10-01')
--GO
--EXEC SearchStatistical '2021-10-01', '2021-12-06'
